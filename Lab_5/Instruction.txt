1. Implementacja drzewa binarnego

Zaimplementuj w języku Python drzewo binarne BST. Niech będzie zaimplementowane za pomocą dwóch klas: pierwsza klasa zawiera pole root wskazujące na korzeń drzewa (ang. root node), druga klasa reprezentuje węzeł drzewa i zawiera cztery pola: klucz, wartość oraz wskaźniki na dwa węzły dzieci (ang. child node) - prawe i lewe rozgałęzienie.

Zaimplementuj poniższe funkcjonalności:
konstruktor - tworzy obiekt reprezentujący drzewo z polem root ustawionym na None
search - wyszukująca i zwracająca wartość odpowiadającą podanemu kluczowi (lub None)
insert - wstawiająca daną wg podanego klucza, jeżeli element o takim kluczu istnieje, jego wartość powinna zostać nadpisana (funkcja pamięta poprzednika, patrz wykład)
delete -  usuwająca daną o podanym kluczu
print - wypisująca zawartość drzewa jako listę od najmniejszego do największego klucza w formie klucz:wartość
height - metoda zwracająca wysokość drzewa od podanego węzła do węzła nieposiadającego kolejnych potomków (leaf node)  - najdłuższa ścieżka w drzewie

Funkcja search wykonuje wyszukiwanie elementu w drzewie na podstawie klucza w wersji rekurencyjnej.
Funkcja insert tworzy kolejne elementy drzewa na podstawie podanego klucza, prawe rozgałęzienie zawiera klucze większe niż klucz w węźle rodzic (parent node), lewe rozgałęzenie zawiera klucze mniejsze niż klucz w węźle rodzic.

Funkcja delete usuwa element drzewa na podstawie podanego klucza. Należy uwzględnić trzy przypadki:
usunięcie węzła, który nie posiada węzłów dzieci (child nodes)
usunięcie węzła z jednym dzieckiem 
usunięcie węzła, który posiada dwa węzły dzieci - usuwany węzeł zastępujemy minimalnym kluczem z prawego poddrzewa (ang. right subtree) - successor node
Funkcja print_tree wypisująca całą strukturę drzewa w formie 2D:
    def print_tree(self):
        print("==============")
        self._print_tree(self.root, 0)
        print("==============")

    def _print_tree(self, node, lvl):
        if node!=None:
            self._print_tree(node.right, lvl+5)

            print()
            print(lvl*" ", node.key, node.data)
     
            self._print_tree(node.left, lvl+5)