1. Problem dopasowania grafów - algorytm Ullmana

1. Wprowadzenie

Problem dokładnego dopasowania dwóch grafów stanowi w istocie pytanie o to, czy są one względem siebie izomorficzne. Jest to specjalny przypadek problemu izomorfizmu podgrafu, który stanowi NP-zupełny problem decyzyjny określony w następujący sposób: dla danych grafów G i P sprawdzić, czy istnieje podgraf G izomorficzny z P.

Wyrażając to jeszcze inaczej - chodzi o to, aby jakiś podgraf G miał identyczną liczbę wierzchołków i układ krawędzi jak wzorzec P.
2. Cel ćwiczenia

implementacja algorytmu Ullmana do weryfikacji dopasowania dwóch grafów (izomorfizm podgrafów),

analiza wpływu dodanie pewnych heurystyk na sposób działania algorytmu,

zadanie dodatkowe - dopasowanie geometryczne grafów (przykładowa aplikacja w biometrii).


3.  Dopasowanie grafów (izomorficzne) - algorytm Ullmana

Izomorfizm grafu P i któregoś podgrafu grafu G możemy opisać w postaci macierzy M - |VP|x|VG|, gdzie każdy wiersz zawiera dokładnie jedną wartość 1, a każda kolumna co najwyżej jedną wartość 1. Ustawiamy mij jako 1, wtedy i tylko wtedy, gdy vj∈ G odpowiada vi∈ P. Wtedy P = M(MG)T, gdzie P i G oznaczają (tu) “klasyczne” macierze sąsiedztwa.

Podsumowując: jeśli spełnione jest wskazane równanie macierzowe P = M(MG)T to znaleźliśmy izomorfizm.

Idea algorytmu - systematycznie przeglądamy możliwe warianty M i sprawdzamy, czy opisują one izomorfizm.


Pseudokod:

ullman(used_columns, current_row, G, P, M):
     if current_row == num_rows(M):
             if M is an isomorphism
                     output True and the encoding [end the algorithm]

     M’ = M      # kopia potrzebna przy (opcjonalnym) pruningu

     prune(M’)  # opcjonalny pruning

     for all unused columns c:
           set column c in M’ to 1 and other columns to 0
           mark c as used
           ullman(used_columns, current_row+1, G, P, M')
           mark c as unused
     output False

  

Analiza:
pierwsza część dotyczy zakończenia rekurencyjnego wypełniania macierzy M (dokonywanego w punkcie 3). Jeśli doszliśmy do ostatniego wiersza tej macierzy, to mamy kandydata na izomorfizm i go testujemy. Jeśli spełnia on równanie macierzowe, to wypisujemy przekodowania. Samo zakończenie obliczeń jest opcjonalne - można szukać dalszych izomorfizmów.

zastosowanie funkcji prune omówimy później,

kluczowa dla działania algorytmu jest pętla for. Zacznijmy analizę od przypadku, kiedy nie przejmujemy się macierzą M0, czyli dopuszczamy wszystkie warianty. Jak ma działać nasze przeszukanie? W pierwszym wierszu ustawiamy w pierwszej kolumnie ‘1’, pozostałe kolumny na 0. Wywołujemy rekurencję dla drugiego wiersza, tam ustawiamy pierwszą wolną kolumnę na ‘1’ (czyli drugą), pozostałe na 0 i ponownie rekurencja. Postępując w opisany sposób, przeglądniemy wszystkie warianty, w których w danym wierszu jest tylko jedna wartość ’1’.

uwaga - zmiany należy przeprowadzać na kopii macierzy M (wewnątrz for).


Idee przyspieszające obliczenia (chcielibyśmy zamienić chociaż część  1 na 0 w M)
1. Macierz M0
Przyspieszenie algorytmu można uzyskać przez wykluczenie z góry przypadków, które na pewno nie dają izomorfizmu. Można stworzyć macierz (nazwijmy ją  M0), która zawiera 1 w miejscu (i,j), jeśli vi może odpowiadać vj  w jakimś izomorfizmie. Zera odpowiadają przypadkom wykluczającym izomorfizm.

Przykładowo możemy rozważać stopień wierzchołka (deg) :

Czyli jeśli dany wierzchołek w G będzie miał mniej krawędzi niż we wzorcu P, to na pewno nie będzie elementem izomorfizmu. Tworząc dodatkowe warunki możemy przyspieszyć obliczenia.
Wykorzystanie M0 polega  na sprawdzeniu, czy dany element c, który chcemy ustawić na 1, ma w M0 wartość 1. Oznacza to, że jest to dopuszczalna (zgodnie z warunkami początkowymi) konfiguracja.


2. Prune

Możemy wykorzystać prostą obserwację. Jeśli p ∈ VP ma sąsiadów należących do p1, ..., pl ∈ P i mapujemy go do pewnego wierzchołka g ∈ VG, to też powinniśmy móc zmapować  p1, ..., pl do sąsiadów g.
A więc jeżeli w macierzy M występuje 1 mówiąca, że p jest mapowany do g to trzeba sprawdzić czy istnieje sąsiad wierzchołka p, który nie jest zmapowany do żadnego sąsiada wierzchołka g. Jeżeli istnieje taki sąsiad to, to 1 w macierzy M jest niepoprawne i możemy je ustawić na 0.

Ta zmiana może uniemożliwić kolejne mapowania, zatem powinniśmy realizować iteracje dopóki nic się nie zmieni.
Jeśli w ten sposób usuniemy wszystkie 1 z całego wiersza to wiemy, że ta wersja M już nie opisze izomorfizmu


Pseudokod:

do
    for all (i,j) where M is 1:
          for all neighbours x of vi in P:
                 if there is no neighbour y of vj st. M(x,y)=1
                       M(i,j) =0

while M was changed

Analiza:
Dla każdego elementu ‘1’ w M pobieramy listę sąsiadów P i G. Następnie sprawdzamy, czy każdy sąsiad P (oznaczony x) ma “jakiegoś” odpowiednika w G (oznaczony y), który jest uwzględniony w macierzy M tj. M(x,y) = 1. Jeśli taki nie występuje, to znaczy, że “wejściowe” wierzchołki i i j nie mogą stanowić elementu izomorfizmu (wtedy ustawiamy M[i,j] = 0).


4. Implementacja/realizacja

używamy reprezentacji w postaci macierzy sąsiedztwa wykorzystując kod stworzony w ramach ćwiczenia "Klasyczne implementacje grafu",

jedyne co nam będzie potrzebne, oprócz standardowych funkcjonalności, to dostęp (pobranie) macierzy sąsiedztwa,

wczytujemy poniższe grafy (warto je sobie narysować). Proszę zadbać o to, aby macierz sąsiedztwa była symetryczna,


graph_G = [ ('A','B',1), ('B','F',1), ('B','C',1), ('C','D',1), ('C','E',1), ('D','E',1)]
graph_P = [ ('A','B',1), ('B','C',1), ('A','C',1)]


pobieramy z grafów macierze sąsiedztwa i zapisujemy je w postaci tablic numpy

inicjujemy M - określamy jej rozmiar i wypełniamy zgodnie z podanym sposobem (przyda się funkcja zwracająca krawędzie dla wierzchołka),

implementujemy funkcję ullman w wersji 1.0, tj. bez wykorzystania M0 i prune,

dodajemy zliczenie liczby wywołań rekurencji. Schemat:

no_recursion = ullman(......, no_recursion)

            no_recursion = no_recursion +1

            ….

            return no_recursion

sprawdzamy czy nasz kod działa i czy znajdujemy izomorfizmy,

    Poniżej, dla ułatwienia testowania, zamieszona została jedna z macierzy M, dla której powinni Państwo uzyskać izomorfizm (dla wierrzołków dodawanych alfabetycznie):
 [[0. 0. 0. 1. 0. 0.]                                                           
 [0. 0. 1. 0. 0. 0.]                                                            
 [0. 0. 0. 0. 1. 0.]]
    To samo, ale dla wierzchołków dodawanych razem z krawędziami: 
 [[0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 1.]]

implementujemy wersję 2.0 z uwzględnieniem M0. Sprawdzamy czy wynik jest poprawny (nadal) oraz czy spadła liczba iteracji.

w wersji 3.0 dodajemy funkcję prune. Dla wskazanego przykładu liczba iteracji powinna nieznacznie zmaleć


Program finalnie powinien jedynie wypisywać w trzech wierszach po parze liczb: liczbę znalezionych izomorfizmów oraz liczbę wywołań rekurencyjnych dla wersji 1.0, 2.0 i 3.0

